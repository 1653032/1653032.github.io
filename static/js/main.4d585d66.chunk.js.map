{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","background","color","value","Board","board","i","this","settings","size","push","renderRow","line","row","renderSquare","history","colors","squares","renderBoard","React","Component","Game","state","xNext","winCond","winner","stepNum","Array","fill","step","console","log","setState","xIsNext","current","status","moves","map","move","desc","key","jumpTo","handleClick","newGame","hori","vert","player","start","Math","max","end","min","count","winningSquares","newColor","slice","forEach","element","prevState","updateColorArray","col","curVert","curHori","oldColor","index","floor","length","checkCol","checkRow","checkDiag","checkAntiDiag","concat","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d585d66.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick= {props.onClick} style={{background: props.color}}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderBoard(){\r\n        const board = [];\r\n        for(let i = 0; i < this.props.settings.size;i++){\r\n            board.push(\r\n                <div className=\"board-row\">\r\n                    {this.renderRow(this.props.settings.size,i)}\r\n                </div>\r\n            )\r\n        }\r\n        return board;\r\n    }\r\n\r\n    renderRow(size,line){\r\n        const row = [];\r\n        for(let i = 0; i < size;i++){\r\n            row.push(this.renderSquare((size*line)+i))\r\n        }\r\n\r\n        return row;\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return <Square color={this.props.history.colors[i]} value={this.props.history.squares[i]} onClick={() => this.props.onClick(i)}/>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderBoard()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          size: 20, //any more than 50 will make the board misaligns.\r\n          xNext: true, // who goes first\r\n          winCond: 5, // <= size of course\r\n          winner: null,\r\n          stepNum: 0,\r\n        };\r\n        this.state.history = [{\r\n            squares: Array(this.state.size*this.state.size).fill(null),\r\n            colors: Array(this.state.size*this.state.size).fill(\"white\")\r\n        }];\r\n        this.state.colors =  Array(this.state.size*this.state.size).fill(\"white\");\r\n        // this.state.horizontal = Array(this.state.size).fill(0);\r\n        // this.state.vertical = Array(this.state.size).fill(0);\r\n    }\r\n\r\n    jumpTo(step){\r\n        console.log(\"ok\");\r\n        this.setState({\r\n            stepNum: step,\r\n            xIsNext: (step % 2) === 0,\r\n          });\r\n    }\r\n\r\n    newGame(){\r\n        this.setState({\r\n            history: [{\r\n                squares: Array(this.state.size*this.state.size).fill(null),\r\n                colors: Array(this.state.size*this.state.size).fill(\"white\")\r\n            }],\r\n            stepNum: 0,\r\n            winner: null,\r\n            xNext: true,\r\n            colors: Array(this.state.size*this.state.size).fill(\"white\")\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNum];\r\n        \r\n        let status = 0;\r\n        if(this.state.winner)\r\n            if(this.state.winner !== 'None')\r\n                status = 'Winner: ' + this.state.winner;\r\n            else status = 'Draw!'\r\n        else status = 'Next player: ' + (this.state.xNext ? 'X' : 'O');\r\n\r\n        const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n            'Go to move #' + move :\r\n            'Go to game start';\r\n        return (\r\n            <li key={move}>\r\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n            </li>\r\n        );\r\n        });\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board settings={this.state} history={current} onClick={(i) => this.handleClick(i)} />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <div>{this.state.winner && <button onClick={()=> this.newGame()}>Start a new game</button>}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // find longest horizontal sequence of current player from current move.\r\n    checkRow(squares, size, winCond,hori,vert,player){\r\n        let start = Math.max(0,hori-(winCond-1));\r\n        let end = Math.min(hori+(winCond-1),size-1);\r\n        let count = 0;\r\n        let winningSquares = [];\r\n        let line = vert*size;\r\n        let max = 1;\r\n\r\n        for(start;start <= end;start++){\r\n            if(squares[line + start] === player){\r\n                count++;\r\n                winningSquares.push(line + start);\r\n            } else {\r\n                if(count > max)\r\n                    max = count;\r\n                count = 0;\r\n                \r\n            }\r\n        }\r\n\r\n        if(count > max)\r\n            max = count;\r\n\r\n        if(max === winCond){\r\n            let newColor = this.state.colors.slice();\r\n            winningSquares.forEach(element => {\r\n                newColor[element] = \"yellow\";\r\n            });\r\n            this.setState((prevState) => ({\r\n                colors: this.updateColorArray(prevState.colors,newColor),\r\n              }));\r\n            return 1;\r\n        }\r\n        else return 0;\r\n    }\r\n\r\n    // find longest vertical sequence of current player from current move.\r\n    checkCol(squares, size, winCond, hori,vert,player){\r\n        let start = Math.max(0,vert-(winCond-1));\r\n        let end = Math.min(vert+(winCond-1),size-1);\r\n        let count = 0;\r\n        let winningSquares = [];\r\n        let col = hori;\r\n        let max = 1;\r\n\r\n        for(start;start <= end;start++){\r\n            if(squares[start*size + col] === player){\r\n                count++;\r\n                winningSquares.push(start*size + col);\r\n            } else {\r\n                if(count > max)\r\n                    max = count;\r\n                count = 0;\r\n            }\r\n        }\r\n\r\n        if(count > max)\r\n            max = count;\r\n\r\n            if(max === winCond){\r\n                let newColor = this.state.colors.slice();\r\n                winningSquares.forEach(element => {\r\n                    newColor[element] = \"yellow\";\r\n                });\r\n                this.setState((prevState) => ({\r\n                    colors: this.updateColorArray(prevState.colors,newColor),\r\n                  }));\r\n                return 1;\r\n            }\r\n            else return 0;\r\n    }\r\n\r\n    // check 2 halves of the diagonal sequence of current player from current move.\r\n    checkDiag(squares, size, winCond, hori,vert,player){\r\n        let count = 1;\r\n        let i = 1,curVert = vert, curHori = hori;\r\n        let winningSquares = [];\r\n\r\n        while (i < winCond){\r\n            curVert = vert + i;\r\n            curHori = hori + i;\r\n\r\n            if(curVert >= 0 && curVert < size && curHori >= 0 && curHori < size){      \r\n                if(squares[curVert*size + curHori] === player){\r\n                    count++;\r\n                    winningSquares.push(curVert*size + curHori);\r\n                } \r\n            }\r\n\r\n            curVert = vert - i;\r\n            curHori = hori - i;\r\n\r\n            if(curVert >= 0 && curVert < size && curHori >= 0 && curHori < size){      \r\n                if(squares[curVert*size + curHori] === player){\r\n                    count++;\r\n                    winningSquares.push(curVert*size + curHori);\r\n                } \r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        if(count === winCond){\r\n            let newColor = this.state.colors.slice();\r\n            winningSquares.forEach(element => {\r\n                newColor[vert*size + hori] = \"yellow\";\r\n                newColor[element] = \"yellow\";\r\n            });\r\n            this.setState((prevState) => ({\r\n                colors: this.updateColorArray(prevState.colors,newColor),\r\n              }));\r\n            return 1;\r\n        }\r\n        else return 0;\r\n    }\r\n\r\n    // check 2 halves of the antidiagonal sequence of current player from current move.\r\n    checkAntiDiag(squares, size, winCond,hori,vert,player){\r\n        let count = 1;\r\n        let i = 1,curVert = vert, curHori = hori;\r\n        let winningSquares = [];\r\n\r\n        while (i < winCond){\r\n            curVert = vert + i;\r\n            curHori = hori - i;\r\n\r\n            if(curVert >= 0 && curVert < size && curHori >= 0 && curHori < size){      \r\n                if(squares[curVert*size + curHori] === player){\r\n                    count++;\r\n                    winningSquares.push(curVert*size + curHori);\r\n                } \r\n            }\r\n\r\n            curVert = vert - i;\r\n            curHori = hori + i;\r\n\r\n            if(curVert >= 0 && curVert < size && curHori >= 0 && curHori < size){      \r\n                if(squares[curVert*size + curHori] === player){\r\n                    count++;\r\n                    winningSquares.push(curVert*size + curHori);\r\n                } \r\n            }\r\n\r\n            i++;\r\n        }\r\n        \r\n        if(count === winCond){\r\n            let newColor = this.state.colors.slice();\r\n            winningSquares.forEach(element => {\r\n                newColor[element] = \"yellow\";\r\n                newColor[vert*size + hori] = \"yellow\";\r\n            });\r\n            this.setState((prevState) => ({\r\n                colors: this.updateColorArray(prevState.colors,newColor),\r\n              }));\r\n            return 1;\r\n        }\r\n        else return 0;\r\n    }\r\n\r\n    updateColorArray(oldColor,newColor){\r\n        newColor.forEach((element,index) => {\r\n            if(element === 'yellow')\r\n                oldColor[index] = 'yellow';            \r\n        });\r\n\r\n        return oldColor;\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0,this.state.stepNum +1);\r\n        let vert = Math.floor(i / this.state.size);\r\n        let hori = i % this.state.size;\r\n        let player = this.state.xNext ? 'X' : 'O';\r\n        const squares = history[history.length-1].squares.slice();\r\n        const colors = this.state.colors.slice();\r\n        \r\n        \r\n        //someone won or the square's already been occupied\r\n        if(squares[i] !== null || this.state.winner !== null) return;\r\n        console.log(history)\r\n        squares[i] = player;\r\n\r\n        if(this.checkCol(squares,this.state.size,this.state.winCond,hori,vert,player) \r\n        || this.checkRow(squares,this.state.size,this.state.winCond,hori,vert,player)\r\n        || this.checkDiag(squares,this.state.size,this.state.winCond,hori,vert,player)\r\n        || this.checkAntiDiag(squares,this.state.size,this.state.winCond,hori,vert,player)\r\n        ){\r\n            this.checkCol(squares,this.state.size,this.state.winCond,hori,vert,player); \r\n            this.checkRow(squares,this.state.size,this.state.winCond,hori,vert,player);\r\n            this.checkDiag(squares,this.state.size,this.state.winCond,hori,vert,player);\r\n            this.checkAntiDiag(squares,this.state.size,this.state.winCond,hori,vert,player);\r\n\r\n            this.setState((prevState) => ({\r\n                history: history.concat([{\r\n                    squares: squares,\r\n                    colors: prevState.colors\r\n                }]),\r\n                stepNum: history.length,\r\n                squares: squares,\r\n                xNext: !this.state.xNext,\r\n                winner: player,\r\n            }));\r\n            return;\r\n        }\r\n        \r\n        console.log(history)\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                colors: colors,\r\n            }]),\r\n            stepNum: history.length,\r\n            xNext: !this.state.xNext,\r\n        });\r\n        console.log(history)\r\n\r\n        if(!squares.includes(null)){\r\n            this.setState({\r\n                winner: 'None',\r\n            })\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}