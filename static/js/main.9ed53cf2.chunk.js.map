{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","background","color","value","Board","board","i","this","settings","size","push","renderRow","line","row","renderSquare","colors","squares","status","winner","xNext","renderBoard","React","Component","Game","state","winCond","history","Array","fill","handleClick","hori","vert","player","start","Math","max","end","min","count","winningSquares","newColor","slice","forEach","element","setState","prevState","updateColorArray","col","curVert","curHori","oldColor","index","floor","concat","checkCol","checkRow","checkDiag","checkAntiDiag","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ed53cf2.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick= {props.onClick} style={{background: props.color}}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderBoard(){\r\n        const board = [];\r\n        for(let i = 0; i < this.props.settings.size;i++){\r\n            board.push(\r\n                <div className=\"board-row\">\r\n                    {this.renderRow(this.props.settings.size,i)}\r\n                </div>\r\n            )\r\n        }\r\n        return board;\r\n    }\r\n\r\n    renderRow(size,line){\r\n        const row = [];\r\n        for(let i = 0; i < size;i++){\r\n            row.push(this.renderSquare((size*line)+i))\r\n        }\r\n\r\n        return row;\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return <Square  color={this.props.settings.colors[i]} value={this.props.settings.squares[i]} onClick={() => this.props.onClick(i)}/>;\r\n    }\r\n\r\n    render() {\r\n        let status;\r\n        if(this.props.settings.winner)\r\n            if(this.props.settings.winner !== 'None')\r\n                status = 'Winner: ' + this.props.settings.winner;\r\n            else status = 'Draw!'\r\n        else status = 'Next player: ' + (this.props.settings.xNext ? 'X' : 'O');\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"status\">{status}</div>\r\n                {this.renderBoard()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          size: 20, //any more than 50 will make the board misaligns.\r\n          xNext: true, // who goes first\r\n          winCond: 5, // <= size of course\r\n          winner: null,\r\n        };\r\n        this.state.history = [];\r\n        this.state.squares = Array(this.state.size*this.state.size).fill(null);\r\n        this.state.colors =  Array(this.state.size*this.state.size).fill(\"white\");\r\n        // this.state.horizontal = Array(this.state.size).fill(0);\r\n        // this.state.vertical = Array(this.state.size).fill(0);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board settings={this.state} onClick={(i) => this.handleClick(i)} />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{/* status */}</div>\r\n                    <ol>{/* TODO */}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // find longest horizontal sequence of current player from current move.\r\n    checkRow(squares, size, winCond,hori,vert,player){\r\n        let start = Math.max(0,hori-(winCond-1));\r\n        let end = Math.min(hori+(winCond-1),size-1);\r\n        let count = 0;\r\n        let winningSquares = [];\r\n        let line = vert*size;\r\n        let max = 1;\r\n\r\n        for(start;start <= end;start++){\r\n            if(squares[line + start] === player){\r\n                count++;\r\n                winningSquares.push(line + start);\r\n            } else {\r\n                if(count > max)\r\n                    max = count;\r\n                count = 0;\r\n                \r\n            }\r\n        }\r\n\r\n        if(count > max)\r\n            max = count;\r\n\r\n        if(max === winCond){\r\n            let newColor = this.state.colors.slice();\r\n            winningSquares.forEach(element => {\r\n                newColor[element] = \"yellow\";\r\n            });\r\n            this.setState((prevState) => ({\r\n                colors: this.updateColorArray(prevState.colors,newColor),\r\n              }));\r\n            return 1;\r\n        }\r\n        else return 0;\r\n    }\r\n\r\n    // find longest vertical sequence of current player from current move.\r\n    checkCol(squares, size, winCond, hori,vert,player){\r\n        let start = Math.max(0,vert-(winCond-1));\r\n        let end = Math.min(vert+(winCond-1),size-1);\r\n        let count = 0;\r\n        let winningSquares = [];\r\n        let col = hori;\r\n        let max = 1;\r\n\r\n        for(start;start <= end;start++){\r\n            if(squares[start*size + col] === player){\r\n                count++;\r\n                winningSquares.push(start*size + col);\r\n            } else {\r\n                if(count > max)\r\n                    max = count;\r\n                count = 0;\r\n            }\r\n        }\r\n\r\n        if(count > max)\r\n            max = count;\r\n\r\n            if(max === winCond){\r\n                let newColor = this.state.colors.slice();\r\n                winningSquares.forEach(element => {\r\n                    newColor[element] = \"yellow\";\r\n                });\r\n                this.setState((prevState) => ({\r\n                    colors: this.updateColorArray(prevState.colors,newColor),\r\n                  }));\r\n                return 1;\r\n            }\r\n            else return 0;\r\n    }\r\n\r\n    // check 2 halves of the diagonal sequence of current player from current move.\r\n    checkDiag(squares, size, winCond, hori,vert,player){\r\n        let count = 1;\r\n        let i = 1,curVert = vert, curHori = hori;\r\n        let winningSquares = [];\r\n\r\n        while (i < winCond){\r\n            curVert = vert + i;\r\n            curHori = hori + i;\r\n\r\n            if(curVert >= 0 && curVert < size && curHori >= 0 && curHori < size){      \r\n                if(squares[curVert*size + curHori] === player){\r\n                    count++;\r\n                    winningSquares.push(curVert*size + curHori);\r\n                } \r\n            }\r\n\r\n            curVert = vert - i;\r\n            curHori = hori - i;\r\n\r\n            if(curVert >= 0 && curVert < size && curHori >= 0 && curHori < size){      \r\n                if(squares[curVert*size + curHori] === player){\r\n                    count++;\r\n                    winningSquares.push(curVert*size + curHori);\r\n                } \r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        if(count === winCond){\r\n            let newColor = this.state.colors.slice();\r\n            winningSquares.forEach(element => {\r\n                newColor[vert*size + hori] = \"yellow\";\r\n                newColor[element] = \"yellow\";\r\n            });\r\n            this.setState((prevState) => ({\r\n                colors: this.updateColorArray(prevState.colors,newColor),\r\n              }));\r\n            return 1;\r\n        }\r\n        else return 0;\r\n    }\r\n\r\n    // check 2 halves of the antidiagonal sequence of current player from current move.\r\n    checkAntiDiag(squares, size, winCond,hori,vert,player){\r\n        let count = 1;\r\n        let i = 1,curVert = vert, curHori = hori;\r\n        let winningSquares = [];\r\n\r\n        while (i < winCond){\r\n            curVert = vert + i;\r\n            curHori = hori - i;\r\n\r\n            if(curVert >= 0 && curVert < size && curHori >= 0 && curHori < size){      \r\n                if(squares[curVert*size + curHori] === player){\r\n                    count++;\r\n                    winningSquares.push(curVert*size + curHori);\r\n                } \r\n            }\r\n\r\n            curVert = vert - i;\r\n            curHori = hori + i;\r\n\r\n            if(curVert >= 0 && curVert < size && curHori >= 0 && curHori < size){      \r\n                if(squares[curVert*size + curHori] === player){\r\n                    count++;\r\n                    winningSquares.push(curVert*size + curHori);\r\n                } \r\n            }\r\n\r\n            i++;\r\n        }\r\n        \r\n        if(count === winCond){\r\n            let newColor = this.state.colors.slice();\r\n            winningSquares.forEach(element => {\r\n                newColor[element] = \"yellow\";\r\n                newColor[vert*size + hori] = \"yellow\";\r\n            });\r\n            this.setState((prevState) => ({\r\n                colors: this.updateColorArray(prevState.colors,newColor),\r\n              }));\r\n            return 1;\r\n        }\r\n        else return 0;\r\n    }\r\n\r\n    updateColorArray(oldColor,newColor){\r\n        newColor.forEach((element,index) => {\r\n            if(element === 'yellow')\r\n                oldColor[index] = 'yellow';            \r\n        });\r\n\r\n        return oldColor;\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history\r\n        let vert = Math.floor(i / this.state.size);\r\n        let hori = i % this.state.size;\r\n        let player = this.state.xNext ? 'X' : 'O';\r\n        const squares = this.state.squares.slice();\r\n\r\n        //someone won or the square's already been occupied\r\n        if(squares[i] !== null || this.state.winner !== null) return;\r\n\r\n        squares[i] = player;\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares\r\n            }]),\r\n            squares: squares,\r\n            xNext: !this.state.xNext\r\n        });\r\n\r\n        if(this.checkCol(squares,this.state.size,this.state.winCond,hori,vert,player) \r\n        || this.checkRow(squares,this.state.size,this.state.winCond,hori,vert,player)\r\n        || this.checkDiag(squares,this.state.size,this.state.winCond,hori,vert,player)\r\n        || this.checkAntiDiag(squares,this.state.size,this.state.winCond,hori,vert,player)\r\n        ){\r\n            this.checkCol(squares,this.state.size,this.state.winCond,hori,vert,player); \r\n            this.checkRow(squares,this.state.size,this.state.winCond,hori,vert,player);\r\n            this.checkDiag(squares,this.state.size,this.state.winCond,hori,vert,player);\r\n            this.checkAntiDiag(squares,this.state.size,this.state.winCond,hori,vert,player);\r\n            this.setState({\r\n                winner: player,\r\n            })\r\n            return;\r\n        }\r\n\r\n        if(!squares.includes(null)){\r\n            this.setState({\r\n                winner: 'None',\r\n            })\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}