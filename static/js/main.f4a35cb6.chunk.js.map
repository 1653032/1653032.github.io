{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","background","color","value","Board","board","i","this","settings","size","push","renderRow","line","row","renderSquare","history","colors","squares","renderBoard","React","Component","Game","state","xNext","winCond","winner","stepNum","settingsMsg","sortOrder","sizeInput","createRef","winCondInput","Array","fill","step","setState","newSize","parseInt","current","newWinCond","newGame","status","moves","slice","sort","reverse","map","move","length","desc","key","jumpTo","handleClick","width","defaultValue","type","ref","name","changeGameSettings","hori","vert","player","start","Math","max","end","min","count","winningSquares","col","curVert","curHori","newColor","forEach","element","floor","winningCol","checkCol","winningRow","checkRow","winningDiag","checkDiag","winningAntiDiag","checkAntiDiag","concat","updateColorArray","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4a35cb6.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick= {props.onClick} style={{background: props.color}}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderBoard(){\r\n        const board = [];\r\n        for(let i = 0; i < this.props.settings.size;i++){\r\n            board.push(\r\n                <div className=\"board-row\">\r\n                    {this.renderRow(this.props.settings.size,i)}\r\n                </div>\r\n            )\r\n        }\r\n        return board;\r\n    }\r\n\r\n    renderRow(size,line){\r\n        const row = [];\r\n        for(let i = 0; i < size;i++){\r\n            row.push(this.renderSquare((size*line)+i))\r\n        }\r\n\r\n        return row;\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return <Square color={this.props.history.colors[i]} value={this.props.history.squares[i]} onClick={() => this.props.onClick(i)}/>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderBoard()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          size: 20, //any more than 50 will make the board misaligns.\r\n          xNext: true, // who goes first\r\n          winCond: 5, // number of continuous squares to win \r\n          winner: null,\r\n          stepNum: 0,\r\n          settingsMsg: null,\r\n          sortOrder: true,\r\n        };\r\n        this.sizeInput= React.createRef();\r\n        this.winCondInput= React.createRef();\r\n        this.state.history = [{\r\n            squares: Array(this.state.size*this.state.size).fill(null),\r\n            colors: Array(this.state.size*this.state.size).fill(\"white\"),\r\n            winner: null\r\n        }];\r\n        this.state.colors =  Array(this.state.size*this.state.size).fill(\"white\");\r\n    }\r\n\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNum: step,\r\n            xNext: (step % 2) === 0,\r\n          });\r\n    }\r\n\r\n    newGame(){\r\n        this.setState({\r\n            history: [{\r\n                squares: Array(this.state.size*this.state.size).fill(null),\r\n                colors: Array(this.state.size*this.state.size).fill(\"white\"),\r\n                winner: null\r\n            }],\r\n            stepNum: 0,\r\n            winner: null,\r\n            xNext: true,\r\n            colors: Array(this.state.size*this.state.size).fill(\"white\")\r\n        })\r\n    }\r\n\r\n    changeGameSettings(){\r\n        const newSize = parseInt(this.sizeInput.current.value);\r\n        const newWinCond = parseInt(this.winCondInput.current.value);\r\n        if(newSize < 1 || newWinCond > newSize || newWinCond < 1){\r\n            this.setState({\r\n               settingsMsg: 'Invalid settings'\r\n            })\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            settingsMsg: null,\r\n            size: newSize,\r\n            winCond: newWinCond\r\n        })\r\n        this.newGame();\r\n    }\r\n    \r\n    render() {\r\n        let history = this.state.history;\r\n        const current = history[this.state.stepNum];\r\n        \r\n        let status = 0;\r\n        if(current.winner)\r\n            if(current.winner !== 'None')\r\n                status = 'Winner: ' + current.winner;\r\n            else status = 'Draw!'\r\n        else status = 'Next player: ' + (this.state.xNext ? 'X' : 'O');\r\n\r\n        if(this.state.sortOrder){\r\n            history = history.slice().sort();\r\n        } else{\r\n            history = history.slice().sort().reverse();\r\n        }\r\n\r\n        const moves = history.map((step, move) => {\r\n        if(!this.state.sortOrder){\r\n            move = history.length - 1 - move;\r\n        }\r\n        const desc = move ?\r\n            'Go to move #' + move :\r\n            'Go to game start';\r\n        return (\r\n            <li key={move}>\r\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n            </li>\r\n        );\r\n        });\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board settings={this.state} history={current} onClick={(i) => this.handleClick(i)} />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <div>{this.state.winner && <button onClick={()=> this.newGame()}>Start a new game</button>}</div>\r\n                    <div>Move List: <button onClick={()=>{this.setState({sortOrder:!this.state.sortOrder})}}>{this.state.sortOrder?'Ascending':'Descending'}</button></div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n                <div className=\"game-info\" style={{width: 150}}>\r\n                        <div><label>\r\n                            Board size:<br/>\r\n                            Default: 20 <br/>\r\n                            <input defaultValue={20} type=\"number\" ref={this.sizeInput} name=\"boardsize\" />\r\n                        </label>\r\n                        </div>\r\n                        <div>\r\n                        <label>\r\n                            Winning condition:<br/>\r\n                            Default: 5 <br/>\r\n                            Max: board size <br/>\r\n                            <input defaultValue={5} type=\"number\" ref={this.winCondInput} name=\"winningcond\"></input>\r\n                        </label>\r\n                        </div>\r\n                        <br/>\r\n                        <button onClick={()=> this.changeGameSettings()}>Apply and reset</button>\r\n                    <div style={{color: 'red'}}>{this.state.settingsMsg}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // find longest horizontal sequence of current player from current move.\r\n    checkRow(squares, size, winCond,hori,vert,player){\r\n        let start = Math.max(0,hori-(winCond-1));\r\n        let end = Math.min(hori+(winCond-1),size-1);\r\n        let count = 0;\r\n        let winningSquares = [];\r\n        let line = vert*size;\r\n        let max = 1;\r\n\r\n        for(start;start <= end;start++){\r\n            if(squares[line + start] === player){\r\n                count++;\r\n                winningSquares.push(line + start);\r\n            } else {\r\n                if(count > max)\r\n                    max = count;\r\n                count = 0;\r\n                \r\n            }\r\n        }\r\n\r\n        if(count > max)\r\n            max = count;\r\n\r\n        if(max >= winCond){\r\n            return winningSquares;\r\n        }\r\n        else return null;\r\n    }\r\n\r\n    // find longest vertical sequence of current player from current move.\r\n    checkCol(squares, size, winCond, hori,vert,player){\r\n        let start = Math.max(0,vert-(winCond-1));\r\n        let end = Math.min(vert+(winCond-1),size-1);\r\n        let count = 0;\r\n        let winningSquares = [];\r\n        let col = hori;\r\n        let max = 1;\r\n\r\n        for(start;start <= end;start++){\r\n            if(squares[start*size + col] === player){\r\n                count++;\r\n                winningSquares.push(start*size + col);\r\n            } else {\r\n                if(count > max)\r\n                    max = count;\r\n                count = 0;\r\n            }\r\n        }\r\n\r\n        if(count > max)\r\n            max = count;\r\n\r\n            if(max >= winCond){\r\n                return winningSquares;\r\n            }\r\n            else return null;\r\n    }\r\n\r\n    // check 2 halves of the diagonal sequence of current player from current move.\r\n    checkDiag(squares, size, winCond, hori,vert,player){\r\n        let count = 1;\r\n        let i = 1,curVert = vert, curHori = hori;\r\n        let winningSquares = [];\r\n\r\n        while (i < winCond){\r\n            curVert = vert + i;\r\n            curHori = hori + i;\r\n\r\n            if(curVert >= 0 && curVert < size && curHori >= 0 && curHori < size){      \r\n                if(squares[curVert*size + curHori] === player){\r\n                    count++;\r\n                    winningSquares.push(curVert*size + curHori);\r\n                } \r\n            }\r\n\r\n            curVert = vert - i;\r\n            curHori = hori - i;\r\n\r\n            if(curVert >= 0 && curVert < size && curHori >= 0 && curHori < size){      \r\n                if(squares[curVert*size + curHori] === player){\r\n                    count++;\r\n                    winningSquares.push(curVert*size + curHori);\r\n                } \r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        if(count >= winCond){\r\n            return winningSquares;\r\n        }\r\n        else return null;\r\n    }\r\n\r\n    // check 2 halves of the antidiagonal sequence of current player from current move.\r\n    checkAntiDiag(squares, size, winCond,hori,vert,player){\r\n        let count = 1;\r\n        let i = 1,curVert = vert, curHori = hori;\r\n        let winningSquares = [];\r\n\r\n        while (i < winCond){\r\n            curVert = vert + i;\r\n            curHori = hori - i;\r\n\r\n            if(curVert >= 0 && curVert < size && curHori >= 0 && curHori < size){      \r\n                if(squares[curVert*size + curHori] === player){\r\n                    count++;\r\n                    winningSquares.push(curVert*size + curHori);\r\n                } \r\n            }\r\n\r\n            curVert = vert - i;\r\n            curHori = hori + i;\r\n\r\n            if(curVert >= 0 && curVert < size && curHori >= 0 && curHori < size){      \r\n                if(squares[curVert*size + curHori] === player){\r\n                    count++;\r\n                    winningSquares.push(curVert*size + curHori);\r\n                } \r\n            }\r\n\r\n            i++;\r\n        }\r\n        \r\n        if(count >= winCond){\r\n            return winningSquares;\r\n        }\r\n        else return null;\r\n    }\r\n\r\n    updateColorArray(winningSquares){\r\n        let newColor = Array(this.state.size*this.state.size).fill(\"white\");\r\n        winningSquares.forEach((element) => {\r\n            newColor[parseInt(element)] = \"yellow\"    \r\n        });\r\n\r\n        return newColor;\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0,this.state.stepNum +1);\r\n        const vert = Math.floor(i / this.state.size);\r\n        const hori = i % this.state.size;\r\n        const player = this.state.xNext ? 'X' : 'O';\r\n        const squares = history[history.length-1].squares.slice();\r\n        const colors = history[history.length-1].colors.slice();\r\n        let winningSquares = [];\r\n\r\n        \r\n        if(history[history.length-1].winner !== null || squares[i] !== null){\r\n            return;\r\n        }\r\n        squares[i] = player;\r\n        \r\n        const winningCol = this.checkCol(squares,this.state.size,this.state.winCond,hori,vert,player)\r\n        const winningRow = this.checkRow(squares,this.state.size,this.state.winCond,hori,vert,player)\r\n        const winningDiag = this.checkDiag(squares,this.state.size,this.state.winCond,hori,vert,player)\r\n        const winningAntiDiag = this.checkAntiDiag(squares,this.state.size,this.state.winCond,hori,vert,player)\r\n\r\n        if(winningCol !== null){\r\n            winningSquares= winningSquares.concat(winningCol);\r\n        }\r\n        if(winningRow !== null){\r\n            winningSquares= winningSquares.concat(winningRow);\r\n        }\r\n        if(winningDiag !== null){\r\n            winningSquares= winningSquares.concat(winningDiag);\r\n            winningSquares.push(i);\r\n        }\r\n        if(winningAntiDiag !== null){\r\n            winningSquares= winningSquares.concat(winningAntiDiag);\r\n            winningSquares.push(i);\r\n        }\r\n\r\n        if(winningSquares.length > 0){\r\n            this.setState({\r\n                history: history.concat([{\r\n                    squares: squares,\r\n                    colors: this.updateColorArray(winningSquares),\r\n                    winner: player,\r\n                }]),\r\n                stepNum: history.length,\r\n                xNext: !this.state.xNext,\r\n                winner: player,\r\n            });\r\n            return;\r\n        }\r\n        \r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                colors: colors,\r\n                winner: null,\r\n            }]),\r\n            stepNum: history.length,\r\n            xNext: !this.state.xNext,\r\n        });\r\n\r\n        if(!squares.includes(null)){\r\n            this.setState({\r\n                history: history.concat([{\r\n                    squares: squares,\r\n                    colors: colors,\r\n                    winner: 'None',\r\n                }]),\r\n            })\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}